#!/usr/bin/env python
# coding: utf-8
"""Natnet client ROS node.

Note that this node does not convert Motive's poses from y-up to z-up. You can do so with:
    rosrun tf static_transform_publisher 0 0 0 0 0 1.57079632679 mocap mocap_motive 100
"""

from __future__ import print_function

import os.path

import rospy
import rospkg
from geometry_msgs.msg import Point, PointStamped, PoseStamped, Quaternion, Vector3
from std_msgs.msg import ColorRGBA
from visualization_msgs.msg import Marker

import natnet


MOCAP_FRAME = 'mocap_motive'


class NatnetClientNode(object):

    def __init__(self):
        self.rigid_body_pubs = []
        self.marker_pubs = {}
        self.marker_vis_pub = rospy.Publisher('~markers/vis', Marker, queue_size=10)
        self.client = None

    def mocap_frame_callback(self, rigid_bodies, markers, timing):
        """Handle a frame of mocap data."""
        print()
        print('{:.1f}s: Received mocap frame'.format(timing.timestamp))

        if rigid_bodies:
            # Publish ~/rigid_bodies/i/pose topics
            for i, b in enumerate(rigid_bodies):
                if i >= len(self.rigid_body_pubs):
                    pub = rospy.Publisher('~rigid_bodies/{}/pose'.format(i), PoseStamped, queue_size=10)
                    self.rigid_body_pubs.append(pub)
                message = PoseStamped()
                message.header.frame_id = MOCAP_FRAME
                message.header.stamp = rospy.Time(timing.timestamp)
                message.pose.position = Point(*b.position)
                message.pose.orientation = Quaternion(*b.orientation)
                self.rigid_body_pubs[i].publish(message)
        if markers:
            # Publish ~/markers/vis topic
            message = Marker()
            message.header.frame_id = MOCAP_FRAME
            message.header.stamp = rospy.Time(timing.timestamp)
            message.ns = 'natnet'
            message.id = 0
            message.type = Marker.SPHERE_LIST
            positions = [Point(*m.position) for m in markers]
            message.points = positions
            sizes = [m.size for m in markers]
            mean_size = sum(sizes) / len(sizes)
            message.scale = Vector3(mean_size, mean_size, mean_size)
            message.color = ColorRGBA(1, 1, 1, 1)
            self.marker_vis_pub.publish(message)
            for m in markers:
                if m.model_id == 0:
                    # For markers which are not part of a rigid body, publish ~/markers/i topic
                    try:
                        pub = self.marker_pubs[m.marker_id]
                    except KeyError:
                        pub = rospy.Publisher('~markers/{}'.format(m.marker_id), PointStamped, queue_size=10)
                        self.marker_pubs[m.marker_id] = pub
                    message = PointStamped()
                    message.header.frame_id = MOCAP_FRAME
                    message.header.stamp = rospy.Time(timing.timestamp)
                    message.point = Point(*m.position)
                    pub.publish(message)

    def run(self):
        print(rospy.get_param('~fake'))
        if rospy.get_param('~fake', False):
            rospack = rospkg.RosPack()
            path = rospack.get_path('python_natnet')
            frame_filename = os.path.join(path, 'data', 'mocapframe_packet_v3.bin')
            info_filename = os.path.join(path, 'data', 'serverinfo_packet_v3.bin')
            client = natnet.fakes.FakeClient.fake_connect(frame_filename, info_filename)
        else:
            server = rospy.get_param('~server')
            client = natnet.Client.connect(server)
        client.set_callback(self.mocap_frame_callback)
        client.spin()


if __name__ == '__main__':
    rospy.init_node('mocap', disable_signals=True)
    try:
        node = NatnetClientNode()
        node.run()
    finally:
        # TODO: Handle ROS shutdown properly
        rospy.signal_shutdown(reason='Finished')
